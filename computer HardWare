{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNF8YZFSHGBg5Yvg76Yv34N",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pramod-kumar4444/computer-Hardware/blob/main/computer%20HardWare\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0V1pWRsbK38N"
      },
      "source": [
        "#Load the necessary python libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('ggplot')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "17XPsVI9LJku"
      },
      "source": [
        "\n",
        "#Load the dataset\n",
        "df = pd.read_csv('./sample_data/data/machine.data', sep=',', header=None)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "s28jOuRCLaCv",
        "outputId": "88782047-933a-49e5-afa5-46f653181356"
      },
      "source": [
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>adviser</td>\n",
              "      <td>32/60</td>\n",
              "      <td>125</td>\n",
              "      <td>256</td>\n",
              "      <td>6000</td>\n",
              "      <td>256</td>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>269</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7a</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>220</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7b</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>172</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7c</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>16000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "      <td>132</td>\n",
              "      <td>132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>sperry</td>\n",
              "      <td>80/8</td>\n",
              "      <td>124</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>42</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>sperry</td>\n",
              "      <td>90/80-model-3</td>\n",
              "      <td>98</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>46</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206</th>\n",
              "      <td>sratus</td>\n",
              "      <td>32</td>\n",
              "      <td>125</td>\n",
              "      <td>2000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>52</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>wang</td>\n",
              "      <td>vs-100</td>\n",
              "      <td>480</td>\n",
              "      <td>512</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>wang</td>\n",
              "      <td>vs-90</td>\n",
              "      <td>480</td>\n",
              "      <td>1000</td>\n",
              "      <td>4000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>209 rows Ã— 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           0              1    2     3      4    5   6    7    8    9\n",
              "0    adviser          32/60  125   256   6000  256  16  128  198  199\n",
              "1     amdahl         470v/7   29  8000  32000   32   8   32  269  253\n",
              "2     amdahl        470v/7a   29  8000  32000   32   8   32  220  253\n",
              "3     amdahl        470v/7b   29  8000  32000   32   8   32  172  253\n",
              "4     amdahl        470v/7c   29  8000  16000   32   8   16  132  132\n",
              "..       ...            ...  ...   ...    ...  ...  ..  ...  ...  ...\n",
              "204   sperry           80/8  124  1000   8000    0   1    8   42   37\n",
              "205   sperry  90/80-model-3   98  1000   8000   32   2    8   46   50\n",
              "206   sratus             32  125  2000   8000    0   2   14   52   41\n",
              "207     wang         vs-100  480   512   8000   32   0    0   67   47\n",
              "208     wang          vs-90  480  1000   4000    0   0    0   45   25\n",
              "\n",
              "[209 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "tId0BOBcLhjE",
        "outputId": "b217fcb7-4ed7-4e7f-e612-71952a13d617"
      },
      "source": [
        "df.columns=['vendor_name', 'model_name', 'machine_cycle_time_ns', 'mmin', 'mmax', 'cache', 'chmin', 'chmax', 'prp', 'erp']\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_name</th>\n",
              "      <th>model_name</th>\n",
              "      <th>machine_cycle_time_ns</th>\n",
              "      <th>mmin</th>\n",
              "      <th>mmax</th>\n",
              "      <th>cache</th>\n",
              "      <th>chmin</th>\n",
              "      <th>chmax</th>\n",
              "      <th>prp</th>\n",
              "      <th>erp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>adviser</td>\n",
              "      <td>32/60</td>\n",
              "      <td>125</td>\n",
              "      <td>256</td>\n",
              "      <td>6000</td>\n",
              "      <td>256</td>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>269</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7a</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>220</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7b</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>172</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>amdahl</td>\n",
              "      <td>470v/7c</td>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>16000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "      <td>132</td>\n",
              "      <td>132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>sperry</td>\n",
              "      <td>80/8</td>\n",
              "      <td>124</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>42</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>sperry</td>\n",
              "      <td>90/80-model-3</td>\n",
              "      <td>98</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>46</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206</th>\n",
              "      <td>sratus</td>\n",
              "      <td>32</td>\n",
              "      <td>125</td>\n",
              "      <td>2000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>52</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>wang</td>\n",
              "      <td>vs-100</td>\n",
              "      <td>480</td>\n",
              "      <td>512</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>wang</td>\n",
              "      <td>vs-90</td>\n",
              "      <td>480</td>\n",
              "      <td>1000</td>\n",
              "      <td>4000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>209 rows Ã— 10 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    vendor_name     model_name  machine_cycle_time_ns  ...  chmax  prp  erp\n",
              "0       adviser          32/60                    125  ...    128  198  199\n",
              "1        amdahl         470v/7                     29  ...     32  269  253\n",
              "2        amdahl        470v/7a                     29  ...     32  220  253\n",
              "3        amdahl        470v/7b                     29  ...     32  172  253\n",
              "4        amdahl        470v/7c                     29  ...     16  132  132\n",
              "..          ...            ...                    ...  ...    ...  ...  ...\n",
              "204      sperry           80/8                    124  ...      8   42   37\n",
              "205      sperry  90/80-model-3                     98  ...      8   46   50\n",
              "206      sratus             32                    125  ...     14   52   41\n",
              "207        wang         vs-100                    480  ...      0   67   47\n",
              "208        wang          vs-90                    480  ...      0   45   25\n",
              "\n",
              "[209 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "4MiXKnPaLnlV",
        "outputId": "03d5c818-4b24-4df7-fba0-edc97fe33489"
      },
      "source": [
        "\n",
        "df.describe()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>machine_cycle_time_ns</th>\n",
              "      <th>mmin</th>\n",
              "      <th>mmax</th>\n",
              "      <th>cache</th>\n",
              "      <th>chmin</th>\n",
              "      <th>chmax</th>\n",
              "      <th>prp</th>\n",
              "      <th>erp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "      <td>209.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>203.822967</td>\n",
              "      <td>2867.980861</td>\n",
              "      <td>11796.153110</td>\n",
              "      <td>25.205742</td>\n",
              "      <td>4.698565</td>\n",
              "      <td>18.267943</td>\n",
              "      <td>105.622010</td>\n",
              "      <td>99.330144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>260.262926</td>\n",
              "      <td>3878.742758</td>\n",
              "      <td>11726.564377</td>\n",
              "      <td>40.628722</td>\n",
              "      <td>6.816274</td>\n",
              "      <td>25.997318</td>\n",
              "      <td>160.830733</td>\n",
              "      <td>154.757102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>17.000000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>15.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>768.000000</td>\n",
              "      <td>4000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>28.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>110.000000</td>\n",
              "      <td>2000.000000</td>\n",
              "      <td>8000.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>45.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>225.000000</td>\n",
              "      <td>4000.000000</td>\n",
              "      <td>16000.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>113.000000</td>\n",
              "      <td>101.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1500.000000</td>\n",
              "      <td>32000.000000</td>\n",
              "      <td>64000.000000</td>\n",
              "      <td>256.000000</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>176.000000</td>\n",
              "      <td>1150.000000</td>\n",
              "      <td>1238.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       machine_cycle_time_ns          mmin  ...          prp          erp\n",
              "count             209.000000    209.000000  ...   209.000000   209.000000\n",
              "mean              203.822967   2867.980861  ...   105.622010    99.330144\n",
              "std               260.262926   3878.742758  ...   160.830733   154.757102\n",
              "min                17.000000     64.000000  ...     6.000000    15.000000\n",
              "25%                50.000000    768.000000  ...    27.000000    28.000000\n",
              "50%               110.000000   2000.000000  ...    50.000000    45.000000\n",
              "75%               225.000000   4000.000000  ...   113.000000   101.000000\n",
              "max              1500.000000  32000.000000  ...  1150.000000  1238.000000\n",
              "\n",
              "[8 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SfWT0HJYLr_Y",
        "outputId": "3e592c62-6e93-47a6-acdc-53aa3add390a"
      },
      "source": [
        "df.shape\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(209, 10)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "nZiryTr9LwPt",
        "outputId": "a3f7da8e-59e1-4e9f-c2a5-76a5ca4d138d"
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "x= df.drop(['erp'], axis=1)\n",
        "sns.pairplot(df, x_vars=x.columns, y_vars=['erp'])\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1620x180 with 9 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "mvUnBKYUL06P",
        "outputId": "5f808a5f-63d6-469b-ff42-1f421e1f95f9"
      },
      "source": [
        "df.drop(['vendor_name','model_name'],axis=1, inplace=True)\n",
        "df"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>machine_cycle_time_ns</th>\n",
              "      <th>mmin</th>\n",
              "      <th>mmax</th>\n",
              "      <th>cache</th>\n",
              "      <th>chmin</th>\n",
              "      <th>chmax</th>\n",
              "      <th>prp</th>\n",
              "      <th>erp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>125</td>\n",
              "      <td>256</td>\n",
              "      <td>6000</td>\n",
              "      <td>256</td>\n",
              "      <td>16</td>\n",
              "      <td>128</td>\n",
              "      <td>198</td>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>269</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>220</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>32000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>172</td>\n",
              "      <td>253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>29</td>\n",
              "      <td>8000</td>\n",
              "      <td>16000</td>\n",
              "      <td>32</td>\n",
              "      <td>8</td>\n",
              "      <td>16</td>\n",
              "      <td>132</td>\n",
              "      <td>132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>204</th>\n",
              "      <td>124</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>42</td>\n",
              "      <td>37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>205</th>\n",
              "      <td>98</td>\n",
              "      <td>1000</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>8</td>\n",
              "      <td>46</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206</th>\n",
              "      <td>125</td>\n",
              "      <td>2000</td>\n",
              "      <td>8000</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>52</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>480</td>\n",
              "      <td>512</td>\n",
              "      <td>8000</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>480</td>\n",
              "      <td>1000</td>\n",
              "      <td>4000</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>209 rows Ã— 8 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "     machine_cycle_time_ns  mmin   mmax  cache  chmin  chmax  prp  erp\n",
              "0                      125   256   6000    256     16    128  198  199\n",
              "1                       29  8000  32000     32      8     32  269  253\n",
              "2                       29  8000  32000     32      8     32  220  253\n",
              "3                       29  8000  32000     32      8     32  172  253\n",
              "4                       29  8000  16000     32      8     16  132  132\n",
              "..                     ...   ...    ...    ...    ...    ...  ...  ...\n",
              "204                    124  1000   8000      0      1      8   42   37\n",
              "205                     98  1000   8000     32      2      8   46   50\n",
              "206                    125  2000   8000      0      2     14   52   41\n",
              "207                    480   512   8000     32      0      0   67   47\n",
              "208                    480  1000   4000      0      0      0   45   25\n",
              "\n",
              "[209 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "id": "28kfmB-nL2jZ",
        "outputId": "497532d8-b901-4941-a825-2fe6751a00f9"
      },
      "source": [
        "from sklearn import preprocessing\n",
        "scaler = preprocessing.StandardScaler().fit(df)\n",
        "scaled= pd.DataFrame(scaler.transform(df))\n",
        "scaled.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.303586</td>\n",
              "      <td>-0.675026</td>\n",
              "      <td>-0.495462</td>\n",
              "      <td>5.694208</td>\n",
              "      <td>1.661989</td>\n",
              "      <td>4.231033</td>\n",
              "      <td>0.575759</td>\n",
              "      <td>0.645587</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.673330</td>\n",
              "      <td>1.326291</td>\n",
              "      <td>1.727049</td>\n",
              "      <td>0.167629</td>\n",
              "      <td>0.485509</td>\n",
              "      <td>0.529479</td>\n",
              "      <td>1.018277</td>\n",
              "      <td>0.995359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.673330</td>\n",
              "      <td>1.326291</td>\n",
              "      <td>1.727049</td>\n",
              "      <td>0.167629</td>\n",
              "      <td>0.485509</td>\n",
              "      <td>0.529479</td>\n",
              "      <td>0.712877</td>\n",
              "      <td>0.995359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.673330</td>\n",
              "      <td>1.326291</td>\n",
              "      <td>1.727049</td>\n",
              "      <td>0.167629</td>\n",
              "      <td>0.485509</td>\n",
              "      <td>0.529479</td>\n",
              "      <td>0.413710</td>\n",
              "      <td>0.995359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.673330</td>\n",
              "      <td>1.326291</td>\n",
              "      <td>0.359350</td>\n",
              "      <td>0.167629</td>\n",
              "      <td>0.485509</td>\n",
              "      <td>-0.087447</td>\n",
              "      <td>0.164405</td>\n",
              "      <td>0.211611</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1         2  ...         5         6         7\n",
              "0 -0.303586 -0.675026 -0.495462  ...  4.231033  0.575759  0.645587\n",
              "1 -0.673330  1.326291  1.727049  ...  0.529479  1.018277  0.995359\n",
              "2 -0.673330  1.326291  1.727049  ...  0.529479  0.712877  0.995359\n",
              "3 -0.673330  1.326291  1.727049  ...  0.529479  0.413710  0.995359\n",
              "4 -0.673330  1.326291  0.359350  ... -0.087447  0.164405  0.211611\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "it0Cgpx5L6z7"
      },
      "source": [
        "\n",
        "#Let's create numpy arrays for features and target\n",
        "x = scaled.iloc[:, :-2].values \n",
        "y = scaled.iloc[:, -1:].values"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LDbd8-cHMB6e",
        "outputId": "0d2cd569-f60e-4798-f27b-eb467c8d7b6e"
      },
      "source": [
        "\n",
        "x.shape,y.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((209, 6), (209, 1))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8BQmFA9hMFr7"
      },
      "source": [
        "#splitting the dataset into training set and test set\n",
        "# 'stratify=y' is not needed, because y is only one class.\n",
        "\n",
        "from sklearn.model_selection  import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x , y , test_size=0.4, random_state=42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3OD3BbFzMI9v"
      },
      "source": [
        "#performing linesr regression \n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model = model.fit(x_train,y_train)\n",
        "pred = model.predict(x_train)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jiYXdBoRMK8o"
      },
      "source": [
        "#predicting values\n",
        "y_pred = model.predict(x_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W1AT-jUCMTPi",
        "outputId": "54519c04-9f8b-495d-dd06-20ea5baeed54"
      },
      "source": [
        "from sklearn.metrics import mean_absolute_error, r2_score\n",
        "print(\"MAE on test: \", mean_absolute_error(y_test, y_pred))\n",
        "print(\"R2 score on test: \", r2_score(y_test, y_pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MAE on test:  0.21174267958808787\n",
            "R2 score on test:  0.8202664954218208\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VuU4dcVhMXhG",
        "outputId": "620aa39a-9fd7-4be7-e32f-625487b0c469"
      },
      "source": [
        "print(\"MAE on train: \", mean_absolute_error(y_train, pred))\n",
        "print(\"R2 score on train: \", r2_score(y_train, pred))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MAE on train:  0.09879074388932868\n",
            "R2 score on train:  0.9490469754878647\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "7LCfGnITMbNW",
        "outputId": "c9356f9c-5be5-4b5c-8b96-4cf3adb5f63a"
      },
      "source": [
        "\n",
        "plt.scatter(y_test, y_pred)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7fa5d431bfd0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}